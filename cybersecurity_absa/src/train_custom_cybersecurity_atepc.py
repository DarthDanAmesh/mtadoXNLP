# src/train_custom_cybersecurity_atepc.py
import warnings
import os
import logging
from pyabsa import AspectTermExtraction as ATEPC
from pyabsa import ModelSaveOption, DeviceTypeOption
import configparser
from pathlib import Path

# === Suppress warnings and logs ===
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'
os.environ['TF_DEPRECATION_WARNINGS'] = '0'

warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=FutureWarning)
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", message=".*tf\\.losses\\.sparse_softmax_cross_entropy.*")
warnings.filterwarnings("ignore", message=".*Importing 'parser.split_arg_string'.*")

logging.getLogger('tensorflow').setLevel(logging.ERROR)
logging.getLogger('pyabsa').setLevel(logging.ERROR)
logging.getLogger('spacy').setLevel(logging.ERROR)
logging.getLogger('weasel').setLevel(logging.ERROR)

def check_dataset_files(dataset_dir):
    """Check if the dataset files exist and contain valid samples"""
    dataset_path = Path(dataset_dir)
    # Update the required file extensions to match the IOB format generated by create_cybersecurity_atepc_dataset.py
    required_files = ['train.dat.atepc', 'valid.dat.atepc', 'test.dat.atepc'] # <--- Updated extensions
    
    for file_name in required_files:
        file_path = dataset_path / file_name
        if not file_path.exists():
            raise FileNotFoundError(f"Required dataset file not found: {file_path}")
        
        # Check if file contains valid samples (optional, for IOB format)
        # Count lines that are not blank and not just contain whitespace
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            # A valid IOB sample usually means at least one token line followed by a blank line separating sentences
            # This check is more complex than just looking for specific strings like $LABEL$.
            # For now, just ensure the file isn't completely empty or just whitespace.
            # You could implement a more sophisticated check if needed.
            non_empty_lines = [line for line in lines if line.strip()]
            
        if len(non_empty_lines) == 0:
            raise ValueError(f"Dataset file {file_path} is empty or contains only whitespace.")
        
        print(f"Found {len(non_empty_lines)} non-empty lines in {file_name}") # Report non-empty lines count
    
    return True

def train_custom_atepc_model():
    # Load configuration
    config = configparser.ConfigParser()
    config_path = Path(__file__).parent.parent / 'config.ini'
    config.read(config_path)
    
    # Get paths
    project_root = Path(__file__).parent.parent
    custom_dataset_dir = project_root / 'data' / 'custom_cybersecurity_atepc'
    models_dir = project_root / config['paths']['models_dir']
    
    # Ensure directories exist
    models_dir.mkdir(parents=True, exist_ok=True)
    
    # Check if custom dataset exists and is valid
    if not custom_dataset_dir.exists():
        raise FileNotFoundError(
            f"Custom dataset not found: {custom_dataset_dir}\n"
            "Please run create_cybersecurity_atepc_dataset.py first."
        )
    
    # Validate dataset files
    check_dataset_files(custom_dataset_dir)
    
    # Get ATEPC configuration
    atepc_config = ATEPC.ATEPCConfigManager.get_atepc_config_english()
    
    # Set model parameters
    atepc_config.model = ATEPC.ATEPCModelList.FAST_LCF_ATEPC
    atepc_config.pretrained_bert = 'bert-base-uncased'  # Using a general-purpose BERT model
    atepc_config.num_epoch = 10
    atepc_config.batch_size = 16
    atepc_config.log_step = 10
    atepc_config.evaluate_begin = 5
    atepc_config.patience = 3
    atepc_config.seed = 42
    atepc_config.cache_dataset = True
    atepc_config.verbose = True
    # Ensure the dataset name is set correctly if needed by PyABSA internally
    # atepc_config.dataset_name = "custom_cybersecurity_atepc" # This might be inferred from path

    # Convert Path to string for PyABSA
    custom_dataset_path = str(custom_dataset_dir)
    
    # Train the model
    print("Training custom cybersecurity ATEPC model...")
    print(f"Using dataset path: {custom_dataset_path}")
    
    trainer = ATEPC.ATEPCTrainer(
        config=atepc_config,
        dataset=custom_dataset_path,  # Pass the directory path containing .atepc files
        auto_device=DeviceTypeOption.AUTO,
        checkpoint_save_mode=ModelSaveOption.SAVE_MODEL_STATE_DICT,
        load_aug=False
    )
    
    print("Custom cybersecurity ATEPC model training completed!")
    print(f"Model checkpoint saved.")
    
    return trainer

def main():
    try:
        trainer = train_custom_atepc_model()
        print("Custom model training completed successfully!")
    except Exception as e:
        print(f"Error during custom model training: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()